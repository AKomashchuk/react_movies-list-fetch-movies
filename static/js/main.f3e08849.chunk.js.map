{"version":3,"sources":["components/MovieCard/MovieCard.tsx","components/MoviesList/MoviesList.tsx","components/FindMovie/FindMovie.tsx","api.ts","App.tsx","index.tsx"],"names":["MovieCard","movie","className","src","imgUrl","alt","title","description","href","imdbUrl","MoviesList","movies","map","imdbId","FindMovie","setQuery","query","addMovie","useState","setMovie","error","setError","showMovie","setShowMovie","isLoading","setIsLoading","buttonText","useEffect","onSubmit","event","preventDefault","fetch","then","res","json","catch","Response","Error","getMovie","movieFromServer","Title","Plot","Poster","imdbID","htmlFor","type","id","placeholder","value","onChange","target","disabled","onClick","App","setMovies","filter","currentMovie","length","currentMovies","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f3e08849.chunk.js","sourcesContent":["import React from 'react';\nimport { Movie } from '../../types/Movie';\nimport './MovieCard.scss';\n\ntype Props = {\n  movie: Movie | null,\n};\n\nexport const MovieCard: React.FC<Props> = ({ movie }) => (\n  <div className=\"card\" data-cy=\"movieCard\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img\n          data-cy=\"moviePoster\"\n          src={movie?.imgUrl}\n          alt=\"Film logo\"\n        />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img\n              src=\"images/imdb-logo.jpeg\"\n              alt=\"imdb\"\n            />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\" data-cy=\"movieTitle\">{movie?.title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\" data-cy=\"movieDescription\">\n        {movie?.description}\n        <br />\n        <a href={movie?.imdbUrl} data-cy=\"movieURL\">\n          IMDB\n        </a>\n      </div>\n    </div>\n  </div>\n);\n","import React from 'react';\n\nimport './MoviesList.scss';\nimport { MovieCard } from '../MovieCard';\nimport { Movie } from '../../types/Movie';\n\ntype Props = {\n  movies: Movie[];\n};\n\nexport const MoviesList: React.FC<Props> = ({ movies }) => (\n  <div className=\"movies\">\n    {movies.map(movie => (\n      <MovieCard\n        key={movie.imdbId}\n        movie={movie}\n      />\n    ))}\n  </div>\n);\n","import React, { FormEvent, useEffect, useState } from 'react';\nimport './FindMovie.scss';\nimport { getMovie } from '../../api';\nimport { MovieData } from '../../types/MovieData';\nimport { ResponseError } from '../../types/ReponseError';\nimport { Movie } from '../../types/Movie';\nimport { MovieCard } from '../MovieCard';\n\ntype Props = {\n  setQuery: (value: string) => void,\n  query: string,\n  addMovie: (newMovie: Movie) => void,\n};\n\nexport const FindMovie: React.FC<Props> = ({ setQuery, query, addMovie }) => {\n  const [movie, setMovie] = useState<Movie | null>(null);\n  const [error, setError] = useState(false);\n  const [showMovie, setShowMovie] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  const buttonText = showMovie ? 'Search again' : 'Find a movie';\n\n  const onSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsLoading(true);\n\n    getMovie(query).then((movieFromServer: MovieData | ResponseError) => {\n      if ('Response' in movieFromServer) {\n        setError(true);\n        setIsLoading(false);\n      }\n\n      if ('Title' in movieFromServer) {\n        setMovie({\n          title: movieFromServer.Title,\n          description: movieFromServer.Plot,\n          imgUrl: movieFromServer.Poster === 'N/A'\n            ? 'https://via.placeholder.com/360x270.png?text=no%20preview'\n            : movieFromServer.Poster,\n          imdbUrl: `https://www.imdb.com/title/${movieFromServer.imdbID}`,\n          imdbId: movieFromServer.imdbID,\n        });\n\n        setShowMovie(true);\n        setError(false);\n        setIsLoading(false);\n      }\n    });\n  };\n\n  const reset = () => {\n    setError(false);\n    setShowMovie(false);\n    setQuery('');\n  };\n\n  const onMovie = () => {\n    if (movie) {\n      addMovie(movie);\n      reset();\n    }\n  };\n\n  useEffect(() => {\n    setError(false);\n  }, [query]);\n\n  return (\n    <>\n      <form\n        className=\"find-movie\"\n        onSubmit={onSubmit}\n      >\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              data-cy=\"titleField\"\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className=\"input is-dander\"\n              value={query}\n              onChange={(event) => setQuery(event.target.value)}\n            />\n          </div>\n\n          {error && (\n            <p className=\"help is-danger\" data-cy=\"errorMessage\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              data-cy=\"searchButton\"\n              type=\"submit\"\n              className={`button is-light ${isLoading ? 'is-loading' : ''}`}\n              disabled={!query}\n            >\n              {buttonText}\n            </button>\n          </div>\n\n          {showMovie && (\n            <div className=\"control\">\n              <button\n                data-cy=\"addButton\"\n                type=\"button\"\n                className=\"button is-primary\"\n                onClick={onMovie}\n              >\n                Add to the list\n              </button>\n            </div>\n          )}\n        </div>\n      </form>\n\n      {showMovie && (\n        <div className=\"container\" data-cy=\"previewContainer\">\n          <h2 className=\"title\">Preview</h2>\n          <MovieCard movie={movie} />\n        </div>\n      )}\n    </>\n  );\n};\n","import { MovieData } from './types/MovieData';\nimport { ResponseError } from './types/ReponseError';\n\nconst API_URL = 'https://www.omdbapi.com/?apikey=9c855e31';\n\nexport function getMovie(query: string): Promise<MovieData | ResponseError> {\n  return fetch(`${API_URL}&t=${query}`)\n    .then(res => res.json())\n    .catch(() => ({\n      Response: 'False',\n      Error: 'unexpected error',\n    }));\n}\n","import { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport { Movie } from './types/Movie';\n\nexport const App = () => {\n  const [movies, setMovies] = useState<Movie[]>([]);\n  const [query, setQuery] = useState('');\n\n  const addMovie = (movie: Movie) => {\n    const checkedDublicate = movies\n      .filter(currentMovie => currentMovie.imdbId !== movie.imdbId);\n\n    if (checkedDublicate.length === movies.length) {\n      setMovies(currentMovies => [...currentMovies, movie]);\n    }\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n\n      <div className=\"sidebar\">\n        <FindMovie\n          setQuery={setQuery}\n          query={query}\n          addMovie={addMovie}\n        />\n      </div>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.css';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}